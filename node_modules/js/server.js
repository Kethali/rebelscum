/* 
 * You're a lunatic tyrant who's taken control.
 * Purge the world.
 */

//GAME LOGIC
//
//keep track of all current games
var games = [];
function getGame(gameID) {
    for (var i = 0, len = games.length; i < len; i++) {
        if (games[i].id === gameID) {
//            console.log("located " + games[i].id);
            return games[i];
        }
    }
}

function joinEvent(gameID, playerName) {
//    console.log("joining " + gameID + " as " + playerName);
    var currentGame = getGame(gameID);
    currentGame.addPlayer(playerName);
    return currentGame;
}

//team 0 = loyalist
//team 1 = rebel

var player = class {
    constructor(name) {
        this.name = name;
        //this.role = null;
        this.team = 0;
        this.alive = true;
        this.currentVotes = 0;
        this.hasVoted = false;
    }

}

var game = class {
    constructor(mode = "werewolf") {
        this.id = makeID();
        this.mode = mode;
        //collects player objects
        this.players = [];

        //loads available teams and roles to pass out?
        //idk how this should work
        this.teams = [];
        this.roles = [];

        //keeps track of current game state
        this.currentRound = 0;
        this.currentPhase = "day";
        this.livingRebels = 0;
        games.push(this);
    }

    addPlayer(playerName) {
        this.players.push(new player(playerName));
        console.log(playerName + " joined " + this.id);
    }

    start() {
        if (this.currentRound === 0) {
            if (this.registerTeams()) {
                this.currentRound = 1;
                this.updateLivingRebels();
                console.log("starting game with " + this.players.length + " players");
            } else {
                console.log("not enough players");
            }
        } else {
            console.log("game has already started");
        }
    }

    //each player is a loyalist by default
    //this randomly assigns 1/3 of players to the rebel team
    registerTeams() {
        //game can't start without a bare minimum of 3 players
        if (this.players.length < 3) {
            return false;
        }
        var assignmentArray = [];
        for (var i = 0; i < this.players.length; i++) {
            assignmentArray.push(i);
        }
        //2 to 1, round down, minimum 1
        var rebels = Math.floor(assignmentArray.length / 3);
        shuffle(assignmentArray);

        for (var i = 0; i < rebels; i++) {
            this.players[assignmentArray[i]].team = 1;
        }
        return true;
    }

    getAvailableRoles() {
        var roles = [];
        switch (this.mode) {
            case "werewolf":
                break;
            default:
                break;
        }
    }

    kill(playerID) {
        this.players[playerID].alive = false;
    }

    updateLivingRebels() {
        var rebels = 0;
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].alive && this.players[i].team === 1) {
                rebels++;
            }
        }
        this.livingRebels = rebels;
    }

    checkWinCon() {
        return false;
    }
    
    advancePhase() {
        
    }

}

function roll(die = 1, faces = 6) {
    die = parseInt(die);
    faces = parseInt(faces);
    var result = 0;
    for (var i = 0; i < die; i++) {
        result += Math.ceil((Math.random() * (faces)));
    }
    return result;
}

function makeID() {
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    for (var i = 0; i < 4; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}

function shuffle(array) {
    var currentIndex = array.length, temporaryValue, randomIndex;

    // While there remain elements to shuffle...
    while (0 !== currentIndex) {

        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;

        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }

    return array;
}

